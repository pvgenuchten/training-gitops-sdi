---
title: "GitOps SDI"
subtitle: "Infrastructure as Code inspired Spatial Data Infrastructures"
author: Paul van Genuchten, Tom Kralidis
date: 2025-06-15
format:
  revealjs:
    incremental: true
    footer: "Infrastructure as Code inspired Spatial Data Infrastructures"
---

# Contents

- What is GitOps?
- Why GitOps?
- Metadata at the source
- About the workshop
- Technologies

## What is [GitOps](https://www.opsmx.com/what-is-gitops) 

- "Git" & "Operations" (like DevOps)

- Git is a source of truth (apps, containers, configuration)
- A GitOps process automatically delivers changes in an online cluster.
- A monitoring process detects difference between desired state and the target cluster 

## [5 principles](https://www.opsmx.com/what-is-gitops) 

- Express the desired state declaratively
- Version control the desired state
- Automatically apply the desired state 
- Reconcile the desired state
- Visibility and control

## Why GitOps?

At ISRIC - World Soil Informtion

- We run various SDI's to facilitate projects
- SDI's should be robust, requiring little maintenance


## Metadata at the source

- Researchers use many field and earth observation data to predict distribution of Soil properties
- They use tools like Excel, R and Python, generally not aware of metadata standards

- Add a `README.txt` to describe the resources in a folder
- Why not structure the content in the README, so also machines can read it?

## About the workshop

- A self guided tutorial at <https://pvgenuchten.github.io/training-gitops-sdi/>
- Two moments to summarize
- Welcoming your feedback at <https://forms.gle/J59DjGbTBx1s1Tus7>
- Ask questions via <https://github.com/pvgenuchten/training-gitops-sdi/discussions/5>

## Technologies

- MCF
- pygeometa
- pyGeoDataCrawler
- pycsw
- mapserver
- terriajs

## Metadata Control File

- A convention of the pygeometa community (Meteo Canada)
- YAML, easy to read by humans and machines
- A subset of the ISO19115 standard for metadata

![MCF](../img/mcf.jpg)

## [pygeometa](https://geopython.github.io/pygeometa/) 

- a library to work with MCF
- exports MCF to various metadata models (iso, dcat, stac)
- <https://github.com/geopython/pygeometa>

## [pyGeoDataCrawler](https://pypi.org/project/geodatacrawler)

- Developed at ISRIC in the last year
- On the shoulders of giants; GDAL, pygeometa, pandas
- Generates MCF files for a file repository
- Imports metadata from external sources
- Extracts MCF files from a repository to load it into a catalogue
- Creates map services configuration for files in the repository

## [pycsw catalogue](https://pycsw.org)

- A catalogue implementation in Python
- Limited funtionality, easy maintenance
- Wide range of supported catalogue standards, serves many communities
- Database backend
- Skin customisable with Jinja templates

Related products; [GeoNetwork](https://geonetwork-opensource.org), [CKAN](https://ckan.org), [dataverse](https://dataverse.org)

## [MapServer](https://mapserver.org)

- Recent versions of MapServer support the old and new standards
- Features and Maps 
- No tiles (mapproxy), No coverages yet 
- No records/stac, by design

Related products; [GeoServer](https://geoserver.org), [QGIS server](https://docs.qgis.org/latest/en/docs/server_manual), [pygeopai](https://pygeoapi.io)

## [TerriaJS](https://terria.io)

An Open Source javascript WebGIS application 

Related products; [GeoNode](https://geonode.org/), [GeoMoose](https://geomoose.org/), [MapBender](https://mapbender.org/), [Oskari](https://www.oskari.org/), [GisQuick](https://gisquick.org/)

## Quarto

- Static site generator from Markdown
- Add diagrams or maps with Python and R scripting
- Other interesting option is the [W3C MapML](https://www.npmjs.com/package/@maps4html/mapml) 

<script type="module" src="https://cdn.jsdelivr.net/npm/@maps4html/mapml@latest/dist/mapml.js"></script>

<mapml-viewer width="800" height="400" projection="OSMTILE" zoom="1" lat="60.0" lon="-100.0" controls>
	<map-layer label="OpenStreetMap" src="https://maps4html.org/web-map-doc/demo/data/osm.mapml" checked></map-layer>	
</mapml-viewer>
