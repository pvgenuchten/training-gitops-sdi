---
title: "1.3 Tools"
subtitle: "A suggestion for relevant tools in data management"
author: Paul van Genuchten
date: 2025-06-15
format:
  revealjs:
    incremental: true

    footer: "Workshop on effective spatial data management"
---

# Contents

- GitOps / Infrastructure as code
- Metadata at the source
- Mapservices from metadata
- Data visualisation

# GitOps / Infrastructure as code

- reproducability
- containerisation

## Github

Service to facilitate co-creation

- version history of contributions
- authentication
- issue management
- release management
- Continuous integration

Related software; Git, Gitlab, Bitbucket, Codeberg

## Quarto

A content management system to create websites, documentation, slides, etc.

Related software; [Hugo](gohugo.io), [mkdocs](https://mkdocs.org), Jekyll, [Wordpress](https://wordpress.org), [Drupal](https://drupal.org)


# Metadata at the source

![File hierarchy](../img/file-hierarchy.jpg)

## A readme in each folder

- Add a readme to describe the resources in a folder
- Why not structure the content in the readme, so also machines can read it?

## Metadata Control File

- A convention of the pygeometa community (Meteo Canada)
- YAML, easy to read by humans and machines
- A subset of the ISO19115 standard for metadata

![MCF](../img/mcf.jpg)

## pygeometa library

- a library to work with MCF
- exports MCF to various metadata models (iso, dcat, stac)
- <https://github.com/geopython/pygeometa>

## The geodatacrawler tool

- Developed at ISRIC in the last year
- On the shoulders of giants; GDAL, pygeometa, pandas
- Generates MCF files for a file repository
- Imports metadata from external sources
- Extracts MCF files from a repository to load it into a catalogue
- Creates map services configuration for files in the repository

## pycsw catalogue

- A catalogue implementation in python
- Limited funtionality, easy maintenance
- Wide range of supported catalogue standards, serves many communities
- Database backend
- Skin customisable with jinja templates

https://pycsw.org

## pygeometa / geodatacrawler

Scripting libraries which support data management of a file repository

- Generate metadata from existing data
- Import remote metadata
- Ingest metadata from a file repository
- Create mapservices (APIs) for existing data


# Mapservices from metadata


## Mapserver

- Recent versions of Mapserver support the old and new standards
- Features and Maps 
- No tiles (mapproxy), No coverages yet 
- No records/stac, by design

https://mapserver.org


## Mapfile

- Configuration via a [mapfile](https://mapserver.org/mapfile/)
- All [gdal formats](https://gdal.org/drivers/vector) supported
- Create mapfiles using QGIS with [geocat bridge](https://plugins.qgis.org/plugins/geocatbridge/)

![mapfile](../img/mapfile.jpg)

## Mapfiles from metadata

- Use the metadata to generate/update mapfiles
- Store map configuration on github
- Use SLD file {dataset}.sld to style a layer
- Metadata is updated with WMS/WFS/WCS url

# Data vizualisation

## TerriaJS

An Open Source javascript WebGIS application 

[demo](https://rwanda.lsc-hubs.org/map/)

Related products; GeoNode, GeoMoose, MapBender, Oskari, [GisQuick](https://gisquick.org/)

## Quarto

- Add diagrams or maps with python and R scripting
- Other interesting option is the [W3C MapML](https://www.npmjs.com/package/@maps4html/mapml) 

<script type="module" src="https://cdn.jsdelivr.net/npm/@maps4html/mapml@latest/dist/mapml.js"></script>

<mapml-viewer width="800" height="400" projection="OSMTILE" zoom="1" lat="60.0" lon="-100.0" controls>
	<map-layer label="OpenStreetMap" src="https://maps4html.org/web-map-doc/demo/data/osm.mapml" checked></map-layer>	
</mapml-viewer>
