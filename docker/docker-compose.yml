services:

  traefik:
    restart: always 
    image: "traefik:v3.1"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
    ports:
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"


  mapserver:
    restart: always 
    image: "camptocamp/mapserver:8.4"
    container_name: "mapserver"
    expose:
      - "80"
    environment:
      - MS_ERRORFILE=stderr
      - MAPSERVER_CONFIG_FILE=/srv/data/ms.conf # config file is mounted into container
      - PROJ_DATA=/usr/local/share/proj
      - PROJ_LIB=/usr/local/share/proj
    volumes:
      - ./data:/srv/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mapserver.rule=Host(`${SDI_DOMAIN}`) && PathPrefix(`/ows`)"
      - "traefik.http.middlewares.mapserver-strip-prefix.stripprefix.prefixes=/ows,/ows/"
      - "traefik.http.routers.mapserver.middlewares=mapserver-strip-prefix@docker"
      - "traefik.http.routers.mapserver.entrypoints=web"
    
  pycsw:
    restart: always 
    image: "geopython/pycsw"
    container_name: "pycsw"
    volumes:
      - ./pycsw/pycsw.yml:/etc/pycsw/pycsw.yml
      - ./pycsw/_base.html:/usr/local/lib/python3.10/site-packages/pycsw/ogc/api/templates/_base.html # to override layout
      - ./pycsw/landing_page.html:/usr/local/lib/python3.10/site-packages/pycsw/ogc/api/templates/landing_page.html # to override layout
      - ./data:/srv/data
    environment:
      # Configuration for the catalogue, see the pycsw.yml file how these values are used
      CAT_URL: http://${SDI_DOMAIN}
      CAT_TITLE: Catalogue
      CAT_DESC: The catalogue provides access to various SDI resources
      CAT_DB: 'postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_USER}'
      PYCSW_CONFIG: /etc/pycsw/pycsw.yml
    expose:
      - "8000"
    depends_on:
      - postgres
    links: 
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pycsw.rule=Host(`${SDI_DOMAIN}`)"
      - "traefik.http.routers.pycsw.entrypoints=web"

  terria:
    restart: always 
    image: "ghcr.io/terriajs/terriamap:0.4.2"
    container_name: "terria"
    volumes:
      - ./terria/config.json:/app/wwwroot/config.json
      - ./terria/simple.json:/app/wwwroot/init/simple.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.terria.rule=Host(`${SDI_DOMAIN}`) && PathPrefix(`/map`)"
      - "traefik.http.middlewares.terria-strip-prefix.stripprefix.prefixes=/map,/map/"
      - "traefik.http.routers.terria.middlewares=terria-strip-prefix@docker"
      - "traefik.http.routers.terria.entrypoints=web"


  postgres:
    restart: always 
    image: postgis/postgis:15-3.4-alpine
    container_name: "postgres"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_USER}
      PGUSER: ${POSTGRES_USER}
    volumes:
      - postgres-vol:/var/lib/postgresql/data

    # add a health-check, others can start when the service is healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRES_USER}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s 

volumes:
  postgres-vol:
  letsencrypt-vol:
